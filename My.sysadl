Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
enum PresenceEN {
		^true, ^false
	}
	dimension Temperature unit Celsius {
		dimension = Temperature } value type TemperatureVT {
			unit = Celsius dimension = Temperature
		}
		value type CamInfoVT {
			unit = Frame dimension = Image
		}
		dimension Image unit Frame {
			dimension = Image } enum CommandEN {
				On, Off
			}
			datatype CommandDT {
				attributes Action : CommandEN desiredTemp : TemperatureVT
			}
			datatype RoomInfoDT {
				attributes RoomID : Int BuildingID : Int Date : DateDT PeopleNum : Int
				ActualTemp : TemperatureVT AirStatus : AirStatusEN Time : TimeDT
			}
			datatype DataTimeDT {
				attributes year : Int month : Int day : Int hour : Int min : Int sec : Int
			}
			enum AirStatusEN {
				On, Off
			}
			datatype DateDT {
				attributes Year : Int Month : Int Day : Int
			}
			datatype TimeDT {
				attributes Hour : Int Min : Int Sec : Int
			}
			datatype SchedulingDT {
				attributes BuildingID : Int RoomID : Int StartTime : TimeDT EndTime :
				TimeDT DesiredTemp : TemperatureVT
			}
			datatype DBSmartPlaceDT extends RoomInfoDT {
				attributes DBTable : RoomInfoDT
			}
		datatype DBQueryDT {
				attributes  queryDB : DateDT
			}
		datatype UserDataDT {
				attributes Login : String Password : String RegistrationNumber : Int Name :
				String UserProfile : ProfileEN DesiredTemp : TemperatureVT
			}
			datatype RoomDataDT {
				attributes IdRoom : Int IdBuilding : Int IdSensorTemp : Int
				IdSensorPresence : Int IdCam : Int IdAirConditioner : Int RoomCapacity :
				Int
			}
			datatype BuildingDataDT {
				attributes IdBuilding : Int Address : String NumberRooms : Int
			}
			enum ProfileEN {
				teacher, adm
			}
		}
package SysADLports {
	import SysADL.types;
port def TemperatureIPT {
				flow in SysADL.types.TemperatureVT
			}
			port def TemperatureOPT {
				flow out SysADL.types.TemperatureVT
			}
			port def PresenceIPT {
				flow in SysADL.types.PresenceEN
			}
			port def PresenceOPT {
				flow out SysADL.types.PresenceEN
			}
			port def CamInfoIPT {
				flow in SysADL.types.CamInfoVT
			}
			port def CamInfoOPT {
				flow out SysADL.types.CamInfoVT
			}
			port def PeopleNumIPT {
				flow in SysADL.types.Int
			}
			port def PeopleNumOPT {
				flow out SysADL.types.Int
			}
			port def CommandIPT {
				flow in SysADL.types.CommandDT
			}
			port def CommandOPT {
				flow out SysADL.types.CommandDT
			}
			port def RoomInfoIPT {
				flow in SysADL.types.RoomInfoDT
			}
			port def RoomInfoOPT {
				flow out SysADL.types.RoomInfoDT
			}
			port def SchedulingIPT {
				flow in SysADL.types.SchedulingDT
			}
			port def SchedulingOPT {
				flow out SysADL.types.SchedulingDT
			}
			port def DBSmartPlaceIPT {
				flow in SysADL.types.DBSmartPlaceDT
			}
			port def DBSmartPlaceOPT {
				flow out SysADL.types.DBSmartPlaceDT
			}
		port def DBQueryIPT {
				flow in SysADL.types.DBQueryDT
			}
			port def DBQueryOPT {
				flow out SysADL.types.DBQueryDT
			}
		port def BuildingDataIPT {
				flow in SysADL.types.BuildingDataDT
			}
			port def BuildingDataOPT {
				flow out SysADL.types.BuildingDataDT
			}
			port def UserDataIPT {
				flow in SysADL.types.UserDataDT
			}
			port def UserDataOPT {
				flow out SysADL.types.UserDataDT
			}
			port def RoomDataIPT {
				flow in SysADL.types.RoomDataDT
			}
			port def RoomDataOPT {
				flow out SysADL.types.RoomDataDT
			}
		}
package SysADLcomponents {
	import SysADL.types;
	import SysADLports;
boundary component def TemperatureSensorCP {
				ports ActualTemp : SysADLports.TemperatureOPT {
				}
			}
			boundary component def PresenceSensorCP {
				ports ActualPresence : SysADLports.PresenceOPT {
				}
			}
			boundary component def InfraRedCP {
				ports nCommandControl : SysADLports.CommandIPT {
				}
				nCommandAir : SysADLports.CommandOPT {
				}
			}
			boundary component def AirConditionerCP {
				ports nCommand : SysADLports.CommandIPT {
				}
			}
			component def RoomControllerCP {
				ports sensorTemp : SysADLports.TemperatureIPT {
				}
				sensorPresence : SysADLports.PresenceIPT {
				}
				nPeople : SysADLports.PeopleNumIPT {
				}
				nCommand : SysADLports.CommandOPT {
				}
				historicDB : SysADLports.RoomInfoOPT {
				}
				scheduling : SysADLports.SchedulingIPT {
				}
			}
			boundary component def CameraControlCP {
				ports ActualImage : SysADLports.CamInfoIPT {
				}
				nPeople : SysADLports.PeopleNumOPT {
				}
			}
			boundary component def DBRoomCP {
				ports StoreInfo : SysADLports.RoomInfoIPT {
				}
			}
			boundary component def CameraCP {
				ports nImage : SysADLports.CamInfoOPT {
				}
			}
			component def RoomSmartPlaceCP {
				ports DBStore : SysADLports.RoomInfoOPT {
				}			
				scheduling : SysADLports.SchedulingIPT {
				}
				configuration { components:
					TemperatureSensorCP : TemperatureSensorCP {
						using ports ActualTemp : SysADLports.TemperatureOPT {
						}
					}
					PresenceSensorCP : PresenceSensorCP {
						using ports ActualPresence : SysADLports.PresenceOPT {
						}
					}
					CameraControlCP : CameraControlCP {
						using ports ActualImage : SysADLports.CamInfoIPT {
						}
						nPeople : SysADLports.PeopleNumOPT {
						}
					}
					CameraCP : CameraCP {
						using ports nImage : SysADLports.CamInfoOPT {
						}
					}
					RoomControlerCP : RoomControllerCP {
						using ports sensorTemp : SysADLports.TemperatureIPT {
						}
						sensorPresence : SysADLports.PresenceIPT {
						}
						nPeople : SysADLports.PeopleNumIPT {
						}
						nCommand : SysADLports.CommandOPT {
						}
						historicDB : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					InfraRedCP : InfraRedCP {
						using ports nCommandControl : SysADLports.CommandIPT {
						}
						nCommandAir : SysADLports.CommandOPT {
						}
					}
					AirConditionerCP : AirConditionerCP {
						using ports nCommand : SysADLports.CommandIPT {
						}
					}
					DBRoomCP : DBRoomCP {
						using ports StoreInfo : SysADLports.RoomInfoIPT {
						}
					}
					connectors:
					controlCam : SysADLconnectors.CamInfoCT bindings CameraCP.nImage =
					CameraControlCP.ActualImage temperature : SysADLconnectors.TemperatureCT
					bindings TemperatureSensorCP.ActualTemp = RoomControlerCP.sensorTemp
					presence : SysADLconnectors.PresenceCT bindings
					PresenceSensorCP.ActualPresence = RoomControlerCP.sensorPresence nPeople :
					SysADLconnectors.PeopleNumCT bindings CameraControlCP.nPeople =
					RoomControlerCP.nPeople Command : SysADLconnectors.CommandCT bindings
					RoomControlerCP.nCommand = InfraRedCP.nCommandControl Command :
					SysADLconnectors.CommandCT bindings InfraRedCP.nCommandAir =
					AirConditionerCP.nCommand DBInfo : SysADLconnectors.RoomInfoCT bindings
					RoomControlerCP.historicDB = DBRoomCP.StoreInfo
					delegations:
					RoomControlerCP.historicDB to DBStore 
					RoomControlerCP.scheduling to scheduling
				}
			}
		component def BuildingSmartPlaceCP {
				ports Wscheduling : SysADLports.SchedulingIPT {
				}
				Rscheduling : SysADLports.SchedulingOPT {
				}
				Rstore : SysADLports.RoomInfoIPT {
				}
				rwStore : SysADLports.RoomInfoOPT {
				}
				configuration{
					components:
					DBBuildingCP : DBBuildingCP {
						using ports StoreInfo : SysADLports.RoomInfoIPT {
						}
					}
					BuildingControlerCP : BuildingControllerCP {
						using ports s : SysADLports.SchedulingIPT {
						}
						s2 : SysADLports.SchedulingOPT {
						}
						st1 : SysADLports.RoomInfoIPT {
						}
						st2 : SysADLports.RoomInfoOPT {
						}
					}
					connectors:
					storeBD : SysADLconnectors.RoomInfoCT bindings BuildingControlerCP.st2 =
					DBBuildingCP.StoreInfo delegations:
					BuildingControlerCP.s2 to Rscheduling BuildingControlerCP.s to Wscheduling
					BuildingControlerCP.st1 to Rstore BuildingControlerCP.st2 to rwStore
				}
			}
			boundary component def DBBuildingCP {
				ports StoreInfo : SysADLports.RoomInfoIPT {
				}
			}
		component def BuildingControllerCP {
				ports s : SysADLports.SchedulingIPT {
				}
				s2 : SysADLports.SchedulingOPT {
				}
				st1 : SysADLports.RoomInfoIPT {
				}
				st2 : SysADLports.RoomInfoOPT {
				}
			}
		component def WebSmartPlaceCP {
				ports scheduling : SysADLports.SchedulingOPT {
				}
				storeBD : SysADLports.RoomInfoIPT {
				}
				configuration{
					components:
					WebSmartPlaceControllerCP : WebSmartPlaceControllerCP {
						using ports sch : SysADLports.SchedulingOPT {
						}
						stroreDB : SysADLports.RoomInfoIPT {
						}
						store : SysADLports.RoomInfoOPT {
						}
						qFunc : SysADLports.DBQueryOPT {
						}
						rFunc : SysADLports.DBSmartPlaceIPT {
						}
						u : SysADLports.UserDataOPT {
						}
						b : SysADLports.BuildingDataOPT {
						}
						r : SysADLports.RoomDataOPT {
						}
						qConfig : SysADLports.DBQueryOPT {
						}
						rConfig : SysADLports.DBSmartPlaceIPT {
						}
						user : SysADLports.UserDataIPT {
						}
						build : SysADLports.BuildingDataIPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
						room : SysADLports.RoomDataIPT {
						}
					}
					Keys : Keys {
						using ports user : SysADLports.UserDataOPT {
						}
						scheduling : SysADLports.SchedulingOPT {
						}
						room : SysADLports.RoomDataOPT {
						}
						build : SysADLports.BuildingDataOPT {
						}
					}
					DBFunctionalCP : DBFunctionalCP {
						using ports store : SysADLports.RoomInfoIPT {
						}
						q : SysADLports.DBQueryIPT {
						}
						result : SysADLports.DBSmartPlaceOPT {
						}
					}
					DBConfigCP : DBConfigCP {
						using ports u : SysADLports.UserDataIPT {
						}
						b : SysADLports.BuildingDataIPT {
						}
						r : SysADLports.RoomDataIPT {
						}
						q : SysADLports.DBQueryIPT {
						}
						res : SysADLports.DBSmartPlaceOPT {
						}
					}
					connectors:
					cb1 : SysADLconnectors.UserDataCT bindings Keys.user =
					WebSmartPlaceControllerCP.user cb2 : SysADLconnectors.RoomDataCT bindings
					Keys.room = WebSmartPlaceControllerCP.room cb3 :
					SysADLconnectors.BuildingDataCT bindings Keys.build =
					WebSmartPlaceControllerCP.build cb4 : SysADLconnectors.SchedulingCT
					bindings Keys.scheduling = WebSmartPlaceControllerCP.scheduling
				cb5 : SysADLconnectors.DBQueryCT bindings WebSmartPlaceControllerCP.qFunc =
					DBFunctionalCP.q cb6 : SysADLconnectors.DBSmartPlaceCT bindings
					DBFunctionalCP.result = WebSmartPlaceControllerCP.rFunc cb7 :
					SysADLconnectors.RoomInfoCT bindings WebSmartPlaceControllerCP.store =
					DBFunctionalCP.store cb8 : SysADLconnectors.UserDataCT bindings
					WebSmartPlaceControllerCP.u = DBConfigCP.u cb9 :
					SysADLconnectors.BuildingDataCT bindings WebSmartPlaceControllerCP.b =
					DBConfigCP.b cb10 : SysADLconnectors.RoomDataCT bindings
					WebSmartPlaceControllerCP.r = DBConfigCP.r cb11 :
					SysADLconnectors.DBQueryCT bindings WebSmartPlaceControllerCP.qConfig =
					DBConfigCP.q cb12 : SysADLconnectors.DBSmartPlaceCT bindings
					DBConfigCP.res = WebSmartPlaceControllerCP.rConfig delegations:
					WebSmartPlaceControllerCP.sch to scheduling
					WebSmartPlaceControllerCP.stroreDB to storeBD
				}
				
				
			}
			component def WebSmartPlaceControllerCP {
			ports sch : SysADLports.SchedulingOPT {
				}
				stroreDB : SysADLports.RoomInfoIPT {
				}
				store : SysADLports.RoomInfoOPT {
				}
				qFunc : SysADLports.DBQueryOPT {
				}
				rFunc : SysADLports.DBSmartPlaceIPT {
				}
				u : SysADLports.UserDataOPT {
				}
				b : SysADLports.BuildingDataOPT {
				}
				r : SysADLports.RoomDataOPT {
				}
				qConfig : SysADLports.DBQueryOPT {
				}
				rConfig : SysADLports.DBSmartPlaceIPT {
				}
			user : SysADLports.UserDataIPT {
				}
				
				build : SysADLports.BuildingDataIPT {
				}
				scheduling : SysADLports.SchedulingIPT {
				}
			room : SysADLports.RoomDataIPT {
				}
			}

			boundary component def DBConfigCP {
				ports u : SysADLports.UserDataIPT {
				}
				b : SysADLports.BuildingDataIPT {
				}
				r : SysADLports.RoomDataIPT {
				}
				q : SysADLports.DBQueryIPT {
				}
				res : SysADLports.DBSmartPlaceOPT {
				}
			}
			boundary component def DBFunctionalCP {
				ports store : SysADLports.RoomInfoIPT {
				}
				q : SysADLports.DBQueryIPT {
				}
				result : SysADLports.DBSmartPlaceOPT {
				}
			}
			component def SmartPlaceARCH {
				configuration{
					components:
					Room1_1 : RoomSmartPlaceCP {
						using ports DB1_1 : SysADLports.RoomInfoOPT {
						}
						s1_1 : SysADLports.SchedulingIPT {
						}
					}
					Room1_2 : RoomSmartPlaceCP {
						using ports DB1_2 : SysADLports.RoomInfoOPT {
						}
						s1_2 : SysADLports.SchedulingIPT {
						}
					}
					Building1 : BuildingSmartPlaceCP {
						using ports ws : SysADLports.SchedulingIPT {
						}
						Rscheduling : SysADLports.SchedulingOPT [ 1, 10 ] {
						}
						Rstore : SysADLports.RoomInfoIPT [ 1, 10 ] {
						}
						rwStore : SysADLports.RoomInfoOPT {
						}
					}
					WebSmartPlaceCP : WebSmartPlaceCP {
						using ports scheduling : SysADLports.SchedulingOPT [ 1, 10 ] {
						}
						storeBD : SysADLports.RoomInfoIPT [ 1, 10 ] {
						}
					}
					Building2 : BuildingSmartPlaceCP {
						using ports ws : SysADLports.SchedulingIPT {
						}
						Rscheduling : SysADLports.SchedulingOPT {
						}
						Rstore : SysADLports.RoomInfoIPT {
						}
						rwStore : SysADLports.RoomInfoOPT {
						}
					}
					Room2_1 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room2_2 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Building3 : BuildingSmartPlaceCP {
						using ports ws : SysADLports.SchedulingIPT {
						}
						Rscheduling : SysADLports.SchedulingOPT [ 1, 10 ] {
						}
						Rstore : SysADLports.RoomInfoIPT [ 1, 10 ] {
						}
						rwStore : SysADLports.RoomInfoOPT {
						}
					}
					Room3_1 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room3_2 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room3_6 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room3_3 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room3_4 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					Room3_5 : RoomSmartPlaceCP {
						using ports DBStore : SysADLports.RoomInfoOPT {
						}
						scheduling : SysADLports.SchedulingIPT {
						}
					}
					connectors:
					r1_1 : SysADLconnectors.RoomInfoCT bindings Room1_1.DB1_1 =
					Building1.Rstore r1_2 : SysADLconnectors.RoomInfoCT bindings Room1_2.DB1_2
					= Building1.Rstore r1_1 : SysADLconnectors.SchedulingCT bindings
					Room1_1.s1_1 = Building1.Rscheduling r1_2 : SysADLconnectors.SchedulingCT
					bindings Room1_2.s1_2 = Building1.Rscheduling ws1 :
					SysADLconnectors.SchedulingCT bindings WebSmartPlaceCP.scheduling =
					Building1.ws ws3 : SysADLconnectors.SchedulingCT bindings
					WebSmartPlaceCP.scheduling = Building3.ws ws2 :
					SysADLconnectors.SchedulingCT bindings WebSmartPlaceCP.scheduling =
					Building2.ws dbw3 : SysADLconnectors.RoomInfoCT bindings Building3.rwStore
					= WebSmartPlaceCP.storeBD dbw1 : SysADLconnectors.RoomInfoCT bindings
					Building1.rwStore = WebSmartPlaceCP.storeBD s1 :
					SysADLconnectors.SchedulingCT bindings Building2.Rscheduling =
					Room2_1.scheduling s2 : SysADLconnectors.SchedulingCT bindings
					Building2.Rscheduling = Room2_2.scheduling db1 :
					SysADLconnectors.RoomInfoCT bindings Room2_1.DBStore = Building2.Rstore
					db2 : SysADLconnectors.RoomInfoCT bindings Room2_2.DBStore =
					Building2.Rstore dbw2 : SysADLconnectors.RoomInfoCT bindings
					Building2.rwStore = WebSmartPlaceCP.storeBD sc1 :
					SysADLconnectors.SchedulingCT bindings Building3.Rscheduling =
					Room3_1.scheduling sc2 : SysADLconnectors.SchedulingCT bindings
					Building3.Rscheduling = Room3_2.scheduling sc3 :
					SysADLconnectors.SchedulingCT bindings Building3.Rscheduling =
					Room3_3.scheduling db4 : SysADLconnectors.RoomInfoCT bindings
					Room3_4.DBStore = Building3.Rstore db5 : SysADLconnectors.RoomInfoCT
					bindings Room3_5.DBStore = Building3.Rstore db6 :
					SysADLconnectors.RoomInfoCT bindings Room3_6.DBStore = Building3.Rstore
					db3 : SysADLconnectors.RoomInfoCT bindings Room3_3.DBStore =
					Building3.Rstore db2 : SysADLconnectors.RoomInfoCT bindings
					Room3_2.DBStore = Building3.Rstore db1 : SysADLconnectors.RoomInfoCT
					bindings Room3_1.DBStore = Building3.Rstore sc6 :
					SysADLconnectors.SchedulingCT bindings Building3.Rscheduling =
					Room3_6.scheduling sc5 : SysADLconnectors.SchedulingCT bindings
					Building3.Rscheduling = Room3_5.scheduling sc4 :
					SysADLconnectors.SchedulingCT bindings Building3.Rscheduling =
					Room3_4.scheduling
				}
			}
		
			
			
		activity def RoomControllerAC ( tempActual : flow SysADL.types.TemperatureVT,
			presenceActual : flow SysADL.types.PresenceEN, nPeople : SysADL.types.Int,
			scheduling : SysADL.types.SchedulingDT ) : ( nCommand :
			SysADL.types.CommandDT, historicDB : SysADL.types.RoomInfoDT ) {
				body {
				actions : SetAirConditionerAN : SetAirConditionerAN {
						using pins tempActual : SysADL.types.TemperatureVT presenceActual :
						SysADL.types.PresenceEN nPeople : SysADL.types.Int
					}
					ExecuteSchedulingAN : ExecuteSchedulingAN {
						using pins scheduling : SysADL.types.SchedulingDT
					}
					StoreHistory : StoreRoomLogAN {
						using pins nPeople : SysADL.types.Int presenceActual :
						SysADL.types.PresenceEN tempActual : SysADL.types.TemperatureVT
					}
					sendRoomLog2BuildingAN : sendRoomLog2BuildingAN {
						using pins roomLog : SysADL.types.RoomInfoDT
					}
					delegate presenceActual to SetAirConditionerAN.tempActual delegate nPeople
					to SetAirConditionerAN.nPeople delegate tempActual to
					SetAirConditionerAN.presenceActual delegate nCommand to
					SetAirConditionerAN delegate nCommand to ExecuteSchedulingAN delegate
					scheduling to ExecuteSchedulingAN.scheduling delegate historicDB to
					StoreHistory delegate presenceActual to StoreHistory.presenceActual
					delegate nPeople to StoreHistory.nPeople delegate tempActual to
					StoreHistory.tempActual flow from StoreHistory to
					sendRoomLog2BuildingAN.roomLog flow from sendRoomLog2BuildingAN to DBRoom
					datastore DBRoom : SysADL.types.RoomInfoDT {
					}
				}
			}
			
			action def SetAirConditionerAN ( tempActual : flow
			SysADL.types.TemperatureVT, presenceActual : SysADL.types.PresenceEN,
			nPeople : SysADL.types.Int ) : SysADL.types.CommandDT {
			}
			action def ExecuteSchedulingAN ( scheduling : SysADL.types.SchedulingDT ) :
			SysADL.types.CommandDT {
			}
			action def StoreRoomLogAN ( tempActual : SysADL.types.TemperatureVT,
			presenceActual : SysADL.types.PresenceEN, nPeople : SysADL.types.Int ) :
			SysADL.types.RoomInfoDT {
			}
		activity def BuildingControlAC ( roomLog : SysADL.types.RoomInfoDT,
			webScheduling : SysADL.types.SchedulingDT ) : ( roomScheduling :
			SysADL.types.SchedulingDT, roomBK : SysADL.types.RoomInfoDT ) {
				body {
					actions : SendSchedulingAN : SendScheduling2RoomAN {
						using pins webScheduling : SysADL.types.SchedulingDT
					}
					sendBuildingLog2WebAN : SendBuildingLog2WebAN {
						using pins buildingLog : SysADL.types.RoomInfoDT
					}
					StoreBuildingLogAN : StoreBuildingLogAN {
						using pins logRoom : SysADL.types.RoomInfoDT
					}
					delegate roomScheduling to SendSchedulingAN delegate webScheduling to
					SendSchedulingAN.webScheduling delegate roomLog to
					sendBuildingLog2WebAN.buildingLog delegate roomBK to sendBuildingLog2WebAN
					delegate roomLog to StoreBuildingLogAN.logRoom flow from
					StoreBuildingLogAN to DBBuilding datastore DBBuilding :
					SysADL.types.RoomInfoDT {
					}
				}
			}
			action def SendScheduling2RoomAN ( webScheduling : SysADL.types.SchedulingDT ) :
			SysADL.types.SchedulingDT {
			}
			action def StoreBuildingLogAN ( logRoom : SysADL.types.RoomInfoDT ) :
			SysADL.types.RoomInfoDT {
			}
			action def SendBuildingLog2WebAN ( buildingLog : SysADL.types.RoomInfoDT ) :
			SysADL.types.RoomInfoDT {
			}
			action def sendRoomLog2BuildingAN ( roomLog : SysADL.types.RoomInfoDT ) :
			SysADL.types.RoomInfoDT {
			}
			activity def WebSmartPlaceControlAC (  user : SysADL.types.UserDataDT, log :
			SysADL.types.RoomInfoDT, job : SysADL.types.SchedulingDT, nRoom :
			SysADL.types.RoomDataDT, nBuild : SysADL.types.BuildingDataDT, rConfig :
			SysADL.types.DBSmartPlaceDT, rFunctional : SysADL.types.DBSmartPlaceDT ) : (
			job2Build : SysADL.types.SchedulingDT, userDB : SysADL.types.UserDataDT,
			buildDB : SysADL.types.BuildingDataDT, roomDB : SysADL.types.RoomDataDT,
			logDB : SysADL.types.RoomInfoDT, qConfig : SysADL.types.DBQueryDT,
			qFunctional : SysADL.types.DBQueryDT ) {
				body {
				actions : StoreWebPlaceLogAN : StoreWebPlaceLogAN {
						using pins logRoom : SysADL.types.RoomInfoDT
					}
					SendScheduling2BuildAN : SendScheduling2BuildAN {
						using pins job : SysADL.types.SchedulingDT
					}
					ManageUserAN : ManageUserAN {
						using pins nUser : SysADL.types.UserDataDT
					}
					ManageRoomAN : ManageRoomAN {
						using pins nRoom : SysADL.types.RoomDataDT
					}
					ManageBuildingAN : ManageBuildingAN {
						using pins nBuild : SysADL.types.BuildingDataDT
					}
					delegate logDB to StoreWebPlaceLogAN delegate log to
					StoreWebPlaceLogAN.logRoom delegate job to SendScheduling2BuildAN.job
					delegate job2Build to SendScheduling2BuildAN delegate userDB to
					ManageUserAN delegate user to ManageUserAN.nUser delegate nRoom to
					ManageRoomAN.nRoom delegate roomDB to ManageRoomAN delegate buildDB to
					ManageBuildingAN delegate nBuild to ManageBuildingAN.nBuild
				}
			}
			
		boundary component def Keys {
				ports user : SysADLports.UserDataOPT {
				}
				scheduling : SysADLports.SchedulingOPT {
				}
				room : SysADLports.RoomDataOPT {
				}
				build : SysADLports.BuildingDataOPT {
				}
			}
		action def StoreWebPlaceLogAN ( logRoom : SysADL.types.RoomInfoDT ) :
			SysADL.types.RoomInfoDT {
			}
			action def SendScheduling2BuildAN ( job : SysADL.types.SchedulingDT ) :
			SysADL.types.SchedulingDT {
			}
			action def ManageUserAN ( nUser : SysADL.types.UserDataDT ) :
			SysADL.types.UserDataDT {
			}
			action def ManageRoomAN ( nRoom : SysADL.types.RoomDataDT ) :
			SysADL.types.RoomDataDT {
			}
			action def ManageBuildingAN ( nBuild : SysADL.types.BuildingDataDT ) :
			SysADL.types.BuildingDataDT {
			}
		}
package SysADLconnectors {
	import SysADL.types;
	import SysADLports;
connector def PresenceCT {
				participants ~ p1 : SysADLports.PresenceOPT {
				}
				~ p2 : SysADLports.PresenceIPT {
				}
				flows SysADL.types.PresenceEN from p1 to p2
			}
			connector def TemperatureCT {
				participants ~ t1 : SysADLports.TemperatureOPT {
				}
				~ t2 : SysADLports.TemperatureIPT {
				}
				flows SysADL.types.TemperatureVT from t1 to t2
			}
			connector def SchedulingCT {
				participants ~ ns1 : SysADLports.SchedulingOPT {
				}
				~ ns2 : SysADLports.SchedulingIPT {
				}
				flows SysADL.types.SchedulingDT from ns1 to ns2
			}
			connector def RoomInfoCT {
				participants ~ ri1 : SysADLports.RoomInfoOPT {
				}
				~ ri2 : SysADLports.RoomInfoIPT {
				}
				flows SysADL.types.RoomInfoDT from ri1 to ri2
			}
			connector def PeopleNumCT {
				participants ~ np1 : SysADLports.PeopleNumOPT {
				}
				~ np2 : SysADLports.PeopleNumIPT {
				}
				flows SysADL.types.Int from np1 to np2
			}
			connector def DBSmartPlaceCT {
				participants ~ db1 : SysADLports.DBSmartPlaceOPT {
				}
				~ db2 : SysADLports.DBSmartPlaceIPT {
				}
				flows SysADL.types.DBSmartPlaceDT from db1 to db2
			}
			connector def CommandCT {
				participants ~ nc1 : SysADLports.CommandOPT {
				}
				~ nc2 : SysADLports.CommandIPT {
				}
				flows SysADL.types.CommandDT from nc1 to nc2
			}
			connector def CamInfoCT {
				participants ~ ci1 : SysADLports.CamInfoOPT {
				}
				~ ci2 : SysADLports.CamInfoIPT {
				}
				flows SysADL.types.CamInfoVT from ci1 to ci2
			}
		connector def DBQueryCT {
				participants ~ q1 : SysADLports.DBQueryOPT {
				}
				~ qe : SysADLports.DBQueryIPT {
				}
				flows SysADL.types.DBQueryDT from q1 to qe
			}
		connector def RoomDataCT {
				participants ~ rd1 : SysADLports.RoomDataOPT {
				}
				~ rd2 : SysADLports.RoomDataIPT {
				}
				flows SysADL.types.RoomDataDT from rd1 to rd2
			}
			connector def UserDataCT {
				participants ~ ud1 : SysADLports.UserDataOPT {
				}
				~ ud2 : SysADLports.UserDataIPT {
				}
				flows SysADL.types.UserDataDT from ud1 to ud2
			}
			connector def BuildingDataCT {
				participants ~ bd1 : SysADLports.BuildingDataOPT {
				}
				~ bd2 : SysADLports.BuildingDataIPT {
				}
				flows SysADL.types.BuildingDataDT from bd1 to bd2
			}
		}
		Requirement ControlarArCondicionado ( 1 ) {
			text = "O sistema deverá controlar o ar condicionado" Requirement
			VerificarQuantidadePessoasSala ( 1.1 ) {
				text =
				"O sistema deverá ser capaz de contar a quantidade de pessoas presentes em uma sala, a partir da imagem enviada pela câmera de vídeo. O sistema deverá retornar um inteiro não negativo que indica a quantidade de pessoas na sala."
			}
			Requirement VerificarTemperaturaSala ( 1.2 ) {
				text =
				"O sensor deverá enviar a temperatura atual da sala num intervalo de 5 minutos para o controlador."
			}
			Requirement VerificarUmidadeSala ( 1.3 ) {
				text =
				"O sensor deverá enviar a umidade atual da sala num intervalo de 5 minutos para o controlador."
			}
			Requirement VerificarPresenca ( 1.4 ) {
				text =
				"O sensor deve ser capaz de verificar se existem pessoas na sala ou não."
			}
			Requirement AlterarTemperatura ( 1.5 ) {
				text =
				"O controlador deve ser capaz de acionar o ar condicionado a fim de ajustar a temperatura do ambiente para a temperatura desejada"
			Requirement AumentarTemperatura ( 1.5.1 ) {
					text =
					"O controlador deve acionar o ar condicionado para que a temperatura seja aumentada, a fim de atingir a temperatura desejada para o ambiente"
				}
				Requirement DiminuirTemperatura ( 1.5.2 ) {
					text =
					"O controlador deve acionar o ar condicionado para que a temperatura seja diminuída, a fim de atingir a temperatura desejada para o ambiente"
				}
			}
			Requirement LigarArCondicionado ( 1.6 ) {
				text =
				"O sistema deverá ser capaz de iniciar o funcionamento do sistema de ar condicionado ao ser escolhida essa opção via controlador do usuário ou portal web."
			}
			Requirement DesligarArCondicionado ( 1.7 ) {
				text =
				"O sistema deverá ser capaz de encerrar o funcionamento do sistema de ar condicionado  ao ser escolhida essa opção via controlador do usuário ou portal web."
			}
			Requirement EnviarDadosSalaControlador ( 1.8 ) {
				text =
				"O sistema deverá armazenar as informações sobre o seu funcionamento, temperaturas, quantidade de pessoas presentes, e todos os dados pertinentes às mudanças do sistema para fim de consulta e confecção dos relatórios de gestão do sistema.(Informações vão compor o log do sistema, e este caso de uso será incluído por todos os outros)"
			}
			Requirement DecidirAcordoSistemaReserva ( 1.9 ) {
				Requirement ComunicarSistemaReservas ( 1.9.1 ) {
				}
			}
		}
		Requirement VerificarPresencaPeloSensorPresenca ( 1.4.1 ) {
			text =
			"O sensor de presença deverá enviar o valor booleano \"falso\" para quando não há presença de pessoas na sala ou \"verdadeiro\", caso contrário."
			derive ControlarArCondicionado.VerificarPresenca;
		}
		Requirement VerificarPresencaPelaCamera ( 1.4.2 ) {
			text =
			"O sistema deverá ser capaz de verificar se existe presença na sala, a partir da imagem enviada pela câmera de vídeo. O sistema deverá retornar um inteiro positivo que indica a presença de pessoas na sala ou \"zero\" para não presença de pessoas."
			derive ControlarArCondicionado.VerificarPresenca;
		}
		
		Requirement EmitirRelatorios ( 2 ) {
			text =
			"O sistema deverá ser capaz de emitir relatórios sobre o funcionamento do sistema, a partir de solicitação via Sistema Web."
		Requirement EmitirRelatorioHistoricoPredio ( 2.1 ) {
				text =
				"O sistema deve permitir a geração de relatório contendo todas as informaçõs relativas ao funcionamento do ar condicionado nas salas de um prédio. Esse relatório deverá ser emitido de acordo com o período desejado."
			}
			Requirement EmitirRelatorioConsumoPredio ( 2.3 ) {
				text =
				"O sistema deve permitir a geração de relatório contendo o consumo relativo ao funcionamento do ar condicionado nas salas de um prédio. Esse relatório deverá ser emitido de acordo com o período desejado."
			}
			Requirement EmitirRelatorioConsumoSala ( 2.4 ) {
				text =
				"O sistema deve permitir a geração de relatório contendo o consumo relativo ao funcionamento do ar condicionado em uma sala. Esse relatório deverá ser emitido de acordo com o período desejado"
			}
			Requirement EmitirRelatorioHistoricoSala ( 2.2 ) {
				text =
				"O sistema deve permitir a geração de relatório contendo todas as informaçõs relativas ao funcionamento do ar condicionado em uma sala. Esse relatório deverá ser emitido de acordo com o período desejado."
			}
			Requirement EmitirRelatorioMedicoesSensores ( 2.5 ) {
				text =
				"O sistema deve permitir a geração de relatório contendo as informações relativas às medições realizadas pelos sensores. Esse relatório deverá ser emitido de acordo com o período e sensor desejado."
			}
		}
		Requirement WebGerenciarFuncionamentoSistema ( 3 ) {
			text =
			"O sistema deve permitir a que seja realizado via sistema web a gestão do funcionamento do sistema de ar condicionado."
			Requirement WebAgendarFuncionamentoArCondicionado ( 3.1 ) {
				text =
				"O sistema deve permitir a que seja realizado via sistema web o agendamento do funcionamento do ar condicionado de uma sala, com opção de escolha de temperatura e horário de início e fim do funcionamento."
			}
			Requirement WebDefinirTemperaturaSala ( 3.2 ) {
				text =
				"O sistema deve permitir a que seja realizado via sistema web a definição da temperatura desejada para uma sala."
			}
			Requirement WebDefinirConfiguracoesPessoais ( 3.3 ) {
				text =
				"O sistema deve permitir a que seja realizado via sistema web a definição da configuração de temperatura de acordo com as preferências pessoais do usuário professor responsável pelo uso da sala."
			}
			Requirement WebAlertarAnomaliasSuporteTecnico ( 3.4 ) {
				text =
				"O sistema deve ser capaz de enviar alertas ao usuário suporte técnico casos de inconsistências e anomalias em seu funcionamento"
			}
		}
		Requirement RequisitosQualidade ( 4 ) {
			text = "O sistema deve atender alguns requisitos de qualidade." Requirement
			Escalabilidade ( 4.1 ) {
				text =
				"O sistema deve ser capaz de receber novas salas, predios e sensores com o mínimo de impacto na sua arquitetura"
			}
			Requirement ToleranciaFalhas ( 4.2 ) {
				text =
				"O sistema deve avisar ao administrador do sistema quando ocorrer alguma falha"
			}
		}