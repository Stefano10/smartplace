Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
enum PresenceEN {
		^true, ^false
	}
	dimension Temperature unit Celsius {
		dimension = Temperature } value type TemperatureVT {
			unit = Celsius dimension = Temperature
		}
		value type CamInfoVT {
			unit = Frame dimension = Image
		}
		dimension Image unit Frame {
			dimension = Image } enum CommandEN {
				On, Off
			}
			datatype CommandDT {
				attributes Action : CommandEN desiredTemp : TemperatureVT
			}
			datatype RoomInfoDT {
				attributes RoomID : Int BuildingID : Int Date : DateDT PeopleNum : Int
				ActualTemp : TemperatureVT AirStatus : AirStatusEN Time : TimeDT
			}
			datatype DataTimeDT {
				attributes year : Int month : Int day : Int hour : Int min : Int sec : Int
			}
			enum AirStatusEN {
				On, Off
			}
			datatype DateDT {
				attributes Year : Int Month : Int Day : Int
			}
			datatype TimeDT {
				attributes Hour : Int Min : Int Sec : Int
			}
			datatype SchedulingDT {
				attributes BuildingID : Int RoomID : Int StartTime : TimeDT EndTime :
				TimeDT DesiredTemp : TemperatureVT
			}
			datatype DBSmartPlaceDT extends RoomInfoDT {
				attributes DBTable : RoomInfoDT
			}
		datatype DBQueryDT {
				attributes StartDate : DateDT EndDate : DateDT
			}
		}
package SysADLports {
	import SysADL.types;
port def TemperatureIPT {
				flow in SysADL.types.TemperatureVT
			}
			port def TemperatureOPT {
				flow out SysADL.types.TemperatureVT
			}
			port def PresenceIPT {
				flow in SysADL.types.PresenceEN
			}
			port def PresenceOPT {
				flow out SysADL.types.PresenceEN
			}
			port def CamInfoIPT {
				flow in SysADL.types.CamInfoVT
			}
			port def CamInfoOPT {
				flow out SysADL.types.CamInfoVT
			}
			port def PeopleNumIPT {
				flow in SysADL.types.Int
			}
			port def PeopleNumOPT {
				flow out SysADL.types.Int
			}
			port def CommandIPT {
				flow in SysADL.types.CommandDT
			}
			port def CommandOPT {
				flow out SysADL.types.CommandDT
			}
			port def RoomInfoIPT {
				flow in SysADL.types.RoomInfoDT
			}
			port def RoomInfoOPT {
				flow out SysADL.types.RoomInfoDT
			}
			port def SchedulingIPT {
				flow in SysADL.types.SchedulingDT
			}
			port def SchedulingOPT {
				flow out SysADL.types.SchedulingDT
			}
			port def DBSmartPlaceIPT {
				flow in SysADL.types.DBSmartPlaceDT
			}
			port def DBSmartPlaceOPT {
				flow out SysADL.types.DBSmartPlaceDT
			}
		port def DBQueryIPT {
				flow in SysADL.types.DBQueryDT
			}
			port def DBQueryOPT {
				flow out SysADL.types.DBQueryDT
			}
		}
package SysADLcomponents {
	import SysADL.types;
	import SysADLports;
boundary component def TemperatureSensorCP {
				ports ActualTemp : SysADLports.TemperatureOPT {
				}
			}
			boundary component def PresenceSensorCP {
				ports ActualPresence : SysADLports.PresenceOPT {
				}
			}
			boundary component def InfraRedCP {
				ports nCommandControl : SysADLports.CommandIPT {
				}
				nCommandAir : SysADLports.CommandOPT {
				}
			}
			boundary component def AirConditionerCP {
				ports nCommand : SysADLports.CommandIPT {
				}
			}
			component def RoomControlerCP {
				ports sensorTemp : SysADLports.TemperatureIPT {
				}
				sensorPresence : SysADLports.PresenceIPT {
				}
				nPeople : SysADLports.PeopleNumIPT {
				}
				nCommand : SysADLports.CommandOPT {
				}
				historicDB : SysADLports.RoomInfoOPT {
				}
				nQueryDB : SysADLports.DBQueryOPT {
				}
				qResult : SysADLports.RoomInfoIPT {
				}
				configuration { }
			}
			component def CameraControlCP {
				ports ActualImage : SysADLports.CamInfoIPT {
				}
				nPeople : SysADLports.PeopleNumOPT {
				}
				configuration { }
			}
			boundary component def DBRoomCP {
				ports StoreInfo : SysADLports.RoomInfoIPT {
				}
				queryResult : SysADLports.RoomInfoOPT {
				}
				nQuery : SysADLports.DBQueryIPT {
				}
			}
			boundary component def CameraCP {
				ports nImage : SysADLports.CamInfoOPT {
				}
			}
			component def RoomSmartPlaceCP {
				configuration { }
			}
		}
package SysADLconnectors {
	import SysADL.types;
	import SysADLports;
connector def PresenceCT {
				participants ~ p1 : SysADLports.PresenceOPT {
				}
				~ p2 : SysADLports.PresenceIPT {
				}
				flows SysADL.types.PresenceEN from p1 to p2
			}
			connector def TemperatureCT {
				participants ~ t1 : SysADLports.TemperatureOPT {
				}
				~ t2 : SysADLports.TemperatureIPT {
				}
				flows SysADL.types.TemperatureVT from t1 to t2
			}
			connector def SchedulingCT {
				participants ~ ns1 : SysADLports.SchedulingOPT {
				}
				~ ns2 : SysADLports.SchedulingIPT {
				}
				flows SysADL.types.SchedulingDT from ns1 to ns2
			}
			connector def RoomInfoCT {
				participants ~ ri1 : SysADLports.RoomInfoOPT {
				}
				~ ri2 : SysADLports.RoomInfoIPT {
				}
				flows SysADL.types.RoomInfoDT from ri1 to ri2
			}
			connector def PeopleNumCT {
				participants ~ np1 : SysADLports.PeopleNumOPT {
				}
				~ np2 : SysADLports.PeopleNumIPT {
				}
				flows SysADL.types.Int from np1 to np2
			}
			connector def DBSmartPlaceCT {
				participants ~ db1 : SysADLports.DBSmartPlaceOPT {
				}
				~ db2 : SysADLports.DBSmartPlaceIPT {
				}
				flows SysADL.types.DBSmartPlaceDT from db1 to db2
			}
			connector def CommandCT {
				participants ~ nc1 : SysADLports.CommandOPT {
				}
				~ nc2 : SysADLports.CommandIPT {
				}
				flows SysADL.types.CommandDT from nc1 to nc2
			}
			connector def CamInfoCT {
				participants ~ ci1 : SysADLports.CamInfoOPT {
				}
				~ ci2 : SysADLports.CamInfoIPT {
				}
				flows SysADL.types.CamInfoVT from ci1 to ci2
			}
		connector def DBQueryCT {
				participants ~ q1 : SysADLports.DBQueryOPT {
				}
				~ qe : SysADLports.DBQueryIPT {
				}
				flows SysADL.types.DBQueryDT from q1 to qe
			}
		}
		Requirement ControlarArCondicionado ( 1 ) {
			text = "O sistema deverá controlar o ar condicionado" Requirement
			VerificarQuantidadePessoasSala ( 1.1 ) {
				text =
				"O sistema deverá ser capaz de contar a quantidade de pessoas presentes em uma sala, a partir da imagem enviada pela câmera de vídeo. O sistema deverá retornar um inteiro não negativo que indica a quantidade de pessoas na sala."
			}
			Requirement VerificarTemperaturaSala ( 1.2 ) {
				text =
				"O sensor deverá enviar a temperatura atual da sala num intervalo de 5 minutos para o controlador."
			}
			Requirement VerificarUmidadeSala ( 1.3 ) {
				text =
				"O sensor deverá enviar a umidade atual da sala num intervalo de 5 minutos para o controlador."
			}
			Requirement VerificarPresenca ( 1.4 ) {
				text =
				"O sensor deve ser capaz de verificar se existem pessoas na sala ou não."
			}
			Requirement AlterarTemperatura ( 1.5 ) {
				text =
				"O controlador deve ser capaz de acionar o ar condicionado a fim de ajustar a temperatura do ambiente para a temperatura desejada"
			}
		}
		Requirement VerificarPresencaPeloSensorPresenca ( 1.4.1 ) {
			text =
			"O sensor de presença deverá enviar o valor booleano \"falso\" para quando não há presença de pessoas na sala ou \"verdadeiro\", caso contrário."
			derive ControlarArCondicionado.VerificarPresenca;
		}
		Requirement VerificarPresencaPelaCamera ( 1.4.2 ) {
			text =
			"O sistema deverá ser capaz de verificar se existe presença na sala, a partir da imagem enviada pela câmera de vídeo. O sistema deverá retornar um inteiro positivo que indica a presença de pessoas na sala ou \"zero\" para não presença de pessoas."
			derive ControlarArCondicionado.VerificarPresenca;
		}
		Requirement AumentarTemperatura ( 1.5.1 ) {
			text =
			"O controlador deve acionar o ar condicionado para que a temperatura seja aumentada, a fim de atingir a temperatura desejada para o ambiente."
			derive ControlarArCondicionado.AlterarTemperatura;
		}
		Requirement DiminuirTemperatura ( 1.5.2 ) {
			text =
			"O controlador deve acionar o ar condicionado para que a temperatura seja diminuída, a fim de atingir a temperatura desejada para o ambiente."
			derive ControlarArCondicionado.AlterarTemperatura;
		}